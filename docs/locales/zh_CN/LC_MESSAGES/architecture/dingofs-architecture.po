# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, DataCanvas
# This file is distributed under the same license as the DingoFS package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: DingoFS\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-05 12:06+0800\n"
"PO-Revision-Date: 2025-06-05 14:40+0800\n"
"Last-Translator: \n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.17.0\n"
"X-Generator: Poedit 3.6\n"

#: ../../source/architecture/dingofs-architecture.md:1
#: 9e04b06df86b4116a4302f6341e45840
msgid "DingoFS Architecture"
msgstr "DingoFS 架构"

#: ../../source/architecture/dingofs-architecture.md:3
#: 113b9f164cff44cc820d4bbe97899865
msgid ""
"DingoFS is a POSIX-compliant distributed file storage system to better "
"support cloud-native scenarios."
msgstr "DingoFS 是 POSIX 兼容的分布式文件存储系统，用于更好的支持云原生场景。"

#: ../../source/architecture/dingofs-architecture.md:5
#: 7a48cd5474b34343b86097579a8f394c
msgid "1.Overall Architecture"
msgstr "1.整体架构"

#: ../../source/architecture/dingofs-architecture.md:7
#: 7431dd6052624fce8a4a0f74a137642c
msgid "![dingofs_architecture](../../images/architecture.png)"
msgstr ""

#: ../../source/architecture/dingofs-architecture.md:7
#: 3d71be2f80c84746869795ba5aca2022
msgid "dingofs_architecture"
msgstr ""

#: ../../source/architecture/dingofs-architecture.md:9
#: 11f75de2563c4b2d962d072249e59358
msgid "DingoFS consists of three parts:"
msgstr "DingoFS由三个部分组成："

#: ../../source/architecture/dingofs-architecture.md:10
#: 85421da7a25f44db86aadffd71f03443
msgid "`dingo-fuse` is a fuse-based file system client."
msgstr "`dingo-fuse` 是基于 fuse 的文件系统客户端。"

#: ../../source/architecture/dingofs-architecture.md:11
#: fbbd03d908b44f5c95002afb3c59cef7
msgid ""
"It receives and handles fuse requests, interacts with `fs-meta cluster` for "
"metadata additions, deletions, and modifications, and interacts with `fs-"
"data cluster` for data additions, deletions, and modifications;"
msgstr ""
"接收并处理 fuse 的请求，与fs-meta cluster 交互实现对元数据的增删改查，与 fs-"
"data cluster交互实现对数据的增删改查；"

#: ../../source/architecture/dingofs-architecture.md:12
#: 7cee787e67de4ad79b640a15087e1093
msgid "Provides metadata caching and data caching to improve performance;"
msgstr "提供元数据缓存和数据缓存以提高性能；"

#: ../../source/architecture/dingofs-architecture.md:13
#: 96282939667e43e0951ef6f81500763d
msgid "Users can access different file system instances through the client."
msgstr "用户可以通过客户端访问不同的文件系统实例。"

#: ../../source/architecture/dingofs-architecture.md:14
#: a0a0118d8c574bc5a23c9980828e1ac9
msgid "`fs-meta cluster` is the metadata service cluster of DingoFS."
msgstr "fs-meta cluster 是 DingoFS 的元数据服务集群。"

#: ../../source/architecture/dingofs-architecture.md:15
#: e94efff7826c4dcabeb1e7208f511c03
msgid ""
"Its architecture consists of two parts: MDS and Metaserver, which are highly "
"scalable and highly available;"
msgstr ""
"它的架构由 MDS 和 Metaserver 两个部分组成，高可扩、高可用；"

#: ../../source/architecture/dingofs-architecture.md:16
#: bc03161916f742a68a6b57ba62d5f36a
msgid ""
"mds is used to manage cluster topology, cluster scheduling, file system "
"instances, and file metadata slice management; based on etcd, it stores "
"cluster topology, user and file system information; based on etcd, it "
"realizes the high availability of mds."
msgstr ""
"mds 用于管理集群拓扑、集群调度、文件系统实例、文件元数据分片管理；基于 etcd "
"存储集群拓扑、用户和文件系统信息；基于 etcd 实现 mds 的高可用。"

#: ../../source/architecture/dingofs-architecture.md:17
#: 7851d549017d45f6b27c7b4f8459708b
msgid ""
"The metaserver is used to store the metadata (inode and dentry) of the "
"files, and achieves high availability and high reliability through multi-"
"raft. Each raft replica group manages multiple sets of metadata slices. 3."
msgstr ""
"metaserver 用于存储文件的元数据( inode 和 dentry )，通过 multi-raft 实现高可"
"用和高可靠。每个 raft 复制组管理多组元数据分片。"

#: ../../source/architecture/dingofs-architecture.md:18
#: 02842ce3732c458489dd4efaaf4abf6f
msgid "`fs-data cluster` is the data service cluster of DingoFS."
msgstr "fs-data cluster 是 DingoFS 的数据服务集群。"

#: ../../source/architecture/dingofs-architecture.md:19
#: f5ff8fa529ac4f59ac87246f14280b07
msgid "It currently supports object storage with S3 standard interface;"
msgstr "当前支持S3标准接口的对象存储；"

#: ../../source/architecture/dingofs-architecture.md:20
#: eaf45d4a9a0940a0ae0d65dd7a716b27
msgid "Users can configure it flexibly according to performance scenarios;"
msgstr "用户可以根据性能场景灵活配置；"

#: ../../source/architecture/dingofs-architecture.md:21
#: 1e325b2df50043189a3b51beab1a288f
msgid ""
"Because it supports multiple storage clusters, DingoFS metadata is managed "
"in a separate cluster."
msgstr "也因为支持多种存储集群，DingoFS 的元数据使用独立的集群统一管理。"

#: ../../source/architecture/dingofs-architecture.md:23
#: 044a816cdc674b449bb05870471e1a8a
msgid "2.Metadata Cluster"
msgstr "2.元数据集群"

#: ../../source/architecture/dingofs-architecture.md:25
#: 746d2bdc0ac046d1a5f16aac4bb800e9
msgid "The metadata cluster `fs-meta cluster` is as follows:"
msgstr "元数据集群fs-meta cluster如下："

#: ../../source/architecture/dingofs-architecture.md:27
#: a0a0118d8c574bc5a23c9980828e1ac9
msgid "![fs_meta_cluster](../../images/fs_meta_cluster.png)"
msgstr ""

#: ../../source/architecture/dingofs-architecture.md:27
#: 044a816cdc674b449bb05870471e1a8a
msgid "fs_meta_cluster"
msgstr ""

#: ../../source/architecture/dingofs-architecture.md:29
#: d1f5bd9802ac42ed8fa74a410e88b8b7
msgid "**Management Topology**"
msgstr "**管理拓扑结构**"

#: ../../source/architecture/dingofs-architecture.md:31
#: 6ac754f191924fa68a8c73dbbba1a3b7
msgid ""
"MDS manages the topology of the meta data cluster as follows:  ![fs_topo]"
"(../../images/fs_topo.png)"
msgstr ""
"MDS 管理元数据集群的拓扑结构，如下图：![fs_topo](../../images/fs_topo.png)"

#: ../../source/architecture/dingofs-architecture.md:31
#: 13bb021aeb224a36b311d0a919a0c5e7
msgid "fs_topo"
msgstr ""

#: ../../source/architecture/dingofs-architecture.md:34
#: 0d65717c5e7946e6a18c15d4ca39dc1d
msgid ""
"`pool` A physical pool that physically isolates machine resources. A "
"`server` cannot interact across a `pool`;"
msgstr "`pool` 物理池，对机器资源进行物理隔离。server不能跨pool交互；"

#: ../../source/architecture/dingofs-architecture.md:36
#: aace0f3576054ca1b6cf0190e458dd29
msgid ""
"`zone` The basic unit of fault isolation, where machines belonging to "
"different `zones` are deployed in different racks and `server` is attributed "
"to a `zone`;"
msgstr ""
"`zone` 故障隔离的基本单元，属于不同zone的机器部署在不同机架，server归属于一"
"个 zone；"

#: ../../source/architecture/dingofs-architecture.md:38
#: ed0d224b987d4faa8e05dd5da9840edc
msgid "`server` Physical server, `metaserver` is attributed to a `zone`;"
msgstr "`server` 物理服务器，metaserver归属于zone；"

#: ../../source/architecture/dingofs-architecture.md:40
#: 3879ff380aa04cff8a51f2074afdafe0
msgid "The `metaserver` minimal service unit, which manages a physical disk."
msgstr "`metaserver` 最小服务单元，管理一块物理磁盘。"

#: ../../source/architecture/dingofs-architecture.md:43
#: c69a49188e9b440da626908a7aa31efd
msgid "**Examples of managed document systems**"
msgstr "**管理文件系统实例**"

#: ../../source/architecture/dingofs-architecture.md:45
#: f0d68b8d825a44f79366ca7c6f7b409e
msgid ""
"MDS manages the distribution of file system instances and file system "
"metadata."
msgstr "MDS 管理文件系统实例及文件系统的元数据的分布。"

#: ../../source/architecture/dingofs-architecture.md:46
#: 8eebacce9811427a8e6ffd3f2ee92ba5
msgid "A file system instance consists of multiple metadata `partitions`."
msgstr "一个文件系统实例由多个元数据分片 partition组成"

#: ../../source/architecture/dingofs-architecture.md:47
#: 469f54bab7374dddadcfb0fd09b18489
msgid ""
"Each `partition` manages a specified range of inodes, with the inode in the "
"root directory of the file system fixed at 1."
msgstr "每个partition管理指定范围的 inode，文件系统根目录的 inode 固定为1"

#: ../../source/architecture/dingofs-architecture.md:48
#: 7b2c51efbc624ffebf96728eba47bcb0
msgid ""
"Each `partition` manages a specified range of inodes. The inode of the root "
"directory is fixed at 1."
msgstr "dentry 存放在父目录所在的元数据分片上;"

#: ../../source/architecture/dingofs-architecture.md:49
#: b55f73ae84b146caa15da2092a43f64e
msgid "For the file /A/B"
msgstr "对于文件 /A/B"

#: ../../source/architecture/dingofs-architecture.md:50
#: 83e6646eb4134d98943c0faf65f5864e
msgid ""
"For files /A/B, first find the metadata slice of the root directory and "
"query dentry(/A) on that metadata slice;"
msgstr "首先找到根目录所在的元数据分片，在该元数据分片上查询 dentry(/A)；"

#: ../../source/architecture/dingofs-architecture.md:51
#: 0bbc99ae22c149f59d9a3853872c1b46
msgid ""
"Get the inodeid of /A from dentry(/A), get the corresponding metadata slice "
"according to the inodeid and query dentry(/A/B);"
msgstr ""
"从 dentry(/A) 中获得 /A 的 inodeid，根据 inodeid 获取对应的元数据分片查询 "
"dentry(/A/B)；"

#: ../../source/architecture/dingofs-architecture.md:52
#: a63a07d9fc3344f9af9c9fd1550a71cf
msgid ""
"Get the inodeid of /A/B from dentry(/A/B), so as to locate the metadata "
"partition and get the inode information of /A/B."
msgstr ""
"从 dentry(/A/B) 中获得 /A/B 的 inodeid，从而定位到元数据分片，获取 /A/B 的 "
"inode 信息。"

#: ../../source/architecture/dingofs-architecture.md:53
#: bc46550447d7404492e98db74e64c0a6
msgid ""
"The `partition` is managed by `copyset`, which is the craft replication group"
msgstr "partition由copyset管理，copyset是raft复制组"

#: ../../source/architecture/dingofs-architecture.md:54
#: 98c61c42e85c42a68f18210be63982eb
msgid "`copyset` and `partition` have a one-to-many relationship;"
msgstr "copyset和partition是一对多的关系；"

#: ../../source/architecture/dingofs-architecture.md:55
#: 77dd4ff947bd488cbaaf24966249db63
msgid ""
"Both `copyset` and `partition` are dynamically created and can be "
"elastically scaled. The current creation strategy is relatively simple: "
"under the premise that multiple copies of `copyset` are in different "
"`servers`, the `metaserver` is selected according to the remaining capacity "
"of the `metaserver`'s management disks; the `partition` is similarly "
"selected according to the remaining capacity of the `metaserver` where the "
"`copyset` is located;"
msgstr ""
"copyset和partition都是动态创建的，可以弹性扩容。当前的创建策略比较简单：在满"
"足copyset的多个副本在不同的server的前提下，按照metaserver的管理磁盘的剩余容量"
"进行选择；partition同样按照copyset所在metaserver的剩余容量进行选择；"

#: ../../source/architecture/dingofs-architecture.md:57
#: 318186efecdb446aaa6042fed8141e87
msgid "**MDS High Availability**"
msgstr "**MDS 高可用**"

#: ../../source/architecture/dingofs-architecture.md:59
#: 6f0904bced134d24b8c323bcfeadd7ca
msgid ""
"MDS high availability is implemented based on etcd, allowing some instances "
"to be exceptionally available, as shown in the following figure:"
msgstr "MDS 的高可用基于 etcd 实现，允许部分实例异常，如下图所示："

#: ../../source/architecture/dingofs-architecture.md:61
#: a794d0cfaa7d48c48d3ca33cf42e50ef
msgid "![fs_mds_high_availability](../../images/fs_mds_high_availability.png)"
msgstr ""

#: ../../source/architecture/dingofs-architecture.md:61
#: 318186efecdb446aaa6042fed8141e87
msgid "fs_mds_high_availability"
msgstr ""

#: ../../source/architecture/dingofs-architecture.md:63
#: 991ebff291e14362be91fb1ff4eb0d55
msgid ""
"MDS registers with etcd, while only one MDS provides service, the backup MDS "
"listens. When the primary MDS hangs up, the backup MDS starts to provide "
"service."
msgstr ""
"MDS 向 etcd 注册，同时只有一个 MDS 提供服务，备 MDS 监听。主 MDS 挂掉后，备 "
"MDS 启动提供服务。"

#: ../../source/architecture/dingofs-architecture.md:65
#: 56069ef21c684b3a917edf563be30523
msgid "**Metaserver High Availability**"
msgstr "**Metaserver 高可用**"

#: ../../source/architecture/dingofs-architecture.md:67
#: c933a70fadfc42529f5dde2f38dbb270
msgid ""
"Metaserver high availability is based on raft implementation, 2N+1 replicas "
"allow N replicas exception."
msgstr "Metaserver高可用基于 raft 实现，2N+1 个副本允许 N 个副本异常。"

#: ../../source/architecture/dingofs-architecture.md:70
#: dea85497fdd1446aa56158caffda3402
msgid "3.Data organization form"
msgstr "3.数据组织形式"

#: ../../source/architecture/dingofs-architecture.md:71
#: 6cd5607f48424e3c8fdab024b2a54a79
msgid ""
"`fs-data cluster` stores the actual data of the file, it can be an object "
"storage cluster that supports S3 standard protocol, and we will dock more "
"clusters according to the scenario requirements."
msgstr ""
"fs-data cluster存放文件的实际数据，可以是支持S3标准协议的对象存储集群，"
"后续根据场景需求，我们还会对接更多的集群。"

#: ../../source/architecture/dingofs-architecture.md:73
#: 0965327a4a7d446692141b4886f04056
msgid "Docking S3"
msgstr "对接 S3"

#: ../../source/architecture/dingofs-architecture.md:74
#: 91e393a13bd9441b8af63ed746f72956
msgid ""
"For a file in the file system, the correspondence between the address space "
"and the S3 object is shown below:"
msgstr "对于文件系统中的一个文件，地址空间和 S3 对象的对应关系如下图所示："

#: ../../source/architecture/dingofs-architecture.md:76
#: 8a2420c44a474d1b8b66b86b7f8e40ed
msgid "![dingofs_data_s3](../../images/fs_data_s3.png)"
msgstr ""

#: ../../source/architecture/dingofs-architecture.md:76
#: f4f7ff74c9b84a6ba5addfb2851c16fc
msgid "dingofs_data_s3"
msgstr ""

#: ../../source/architecture/dingofs-architecture.md:78
#: 00856b4e989c451585a03ed84b841eae
msgid ""
"On the `dingo-fuse` side, a file's address space consists of multiple fixed-"
"size `chunks`, each of which consists of multiple `datacache`s of variable "
"length;"
msgstr ""
"在dingo-fuse端，一个文件的地址空间由多个固定大小的chunk组成，每个chunk由多个"
"长度不固定的datacache组成；"

#: ../../source/architecture/dingofs-architecture.md:79
#: 7c3f5e3bfeae4f65a3d33a6152262ade
msgid ""
"The `datacache` is split according to the granularity of the `block` and "
"uploaded to S3;"
msgstr "datacache按照block的粒度拆分后上传到 S3 中；"

#: ../../source/architecture/dingofs-architecture.md:80
#: 444d6f5e01bc430c8b4aaa0a80abb726
#, python-brace-format
msgid ""
"Each datacache is represented by { chunkid, offset, len, size } in inode, "
"and the key of each datacache in S3 is represented by { fsid, inodeid, "
"chunkid, blockindex }. According to the record of data position in inode, we "
"can calculate the number of data blocks in S3 corresponding to this part of "
"data and the key of each data block by the size of `chunk` and `block`."
msgstr ""
"每个数据块在 inode 中由{ chunkid, offset, len, size } 表示，每个数据块在 S3 "
"中的 key 由 { fsid, inodeid, chunkid, blockindex } 表示。根据 inode 中数据位"
"置的记录，可以通过chunk和block的大小，计算出这部分数据对应的 S3 中数据块的数"
"量以及每个数据块的 key。"

#: ../../source/architecture/dingofs-architecture.md:82
#: 27b6ef7df8e142f09e287f96f054a4b1
msgid "4.System Features"
msgstr "4.系统特性"

#: ../../source/architecture/dingofs-architecture.md:83
#: b910dd7d8b7b448f86b2ed938e6e6222
msgid ""
"Multi-storage system support. Data is supported to be stored both to the "
"public cloud and to local storage systems; it supports free flow of data "
"between different storage systems and active/passive data lifecycle "
"management;"
msgstr ""
"多存储系统支持。数据既支持存储到公有云，又支持存储到本地存储系统；支持数据在"
"不同存储系统之间自由流转，支持主动/被动数据生命周期管理；"

#: ../../source/architecture/dingofs-architecture.md:84
#: ab940ac609b747aa8073d25a4607f352
msgid ""
"metadata clusters and data clusters are highly available, highly scalable, "
"and highly reliable;"
msgstr "元数据集群和数据集群高可用、高可扩、高可靠；"

#: ../../source/architecture/dingofs-architecture.md:85
#: 7687e75fb8054ffd9f73543aa8213247
msgid ""
"support for cache, the client has two levels of memory and disk cache "
"acceleration; support for multi-level cache, BS clusters can be used as a "
"persistent cache layer ;)"
msgstr ""
"支持高速缓存，客户端有内存和磁盘两级缓存加速；支持多级缓存，BS集群可作为持久"
"化缓存层;"

#: ../../source/architecture/dingofs-architecture.md:86
#: f85bc35dd67d40d8b8ec69e359ace64b
msgid ""
"POSIX-compatible, used like a local file system, business can be seamlessly "
"accessed;"
msgstr "POSIX兼容，像本地文件系统一样使用，业务可以无缝接入；"

#: ../../source/architecture/dingofs-architecture.md:87
#: a58856e534164b4ab89e3ae9c0976d45
msgid "Easy operation and maintenance , common exceptions can be self-healing."
msgstr "易运维，常见的异常可以自愈。"
