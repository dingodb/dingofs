# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, DataCanvas
# This file is distributed under the same license as the DingoFS package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: DingoFS \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-30 10:29+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/architecture/metaserver-architecture.md:1
#: 8b0ed4101563409ebe719ce339f90503
msgid "MetaServer Architecture"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:2
#: b2f7545555e541fd84f886e2f6869a53
msgid "Overview"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:4
#: 371151d2c6b549369830a2d880a1bcba
msgid ""
"MetaServer provides highly available and reliable metadata services in a "
"DingoFS cluster and guarantees file system metadata consistency. At the "
"same time, it was designed with high performance and scalability in mind."
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:6
#: a5c05b9b3b314f6790a4815fb9da6386
msgid ""
"In the overall design, a single MetaServer runs on the host as a user "
"process, and a host can run multiple MetaServer processes if there are "
"enough CPU/RAM resources. At the same time, Raft is utilized to ensure "
"data consistency and high availability of services."
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:8
#: 26d8090d384c4200a2e1f59b33095ec9
msgid ""
"At the metadata management level, file system metadata is managed in "
"slices to avoid the performance bottleneck caused by a single Raft Group "
"maintaining a file system metadata. Each slice of metadata is called a "
"Partition, and the correspondence between Copyset and Partition can be "
"one-to-one or one-to-many. In the one-to-many case, a Copyset can "
"maintain multiple Partitions. in the one-to-many case, the file system "
"metadata management is shown in the following figure:"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:10
#: 7ce9d14b0bcb43668eff530e0cb91f99
msgid "! [copyset-partition](../../images/fs-copyset-partition.png)"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:12
#: bf445dc4d58247369c39686b1ede725e
msgid ""
"There are two Copysets in the figure, and three copies are placed on "
"three machines.P1/P2/P3/P4 denote the metadata partitions of the file "
"system, where P1/P3 belongs to one file system and P2/P4 belongs to one "
"file system."
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:14
#: 02ad1532f15b4e938f18008120d39abd
msgid "Overall Architecture"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:16
#: c31ace6b37a5450ba571f8afc8c0b12d
msgid ""
"The overall architecture of MetaServer is shown below, which can be "
"roughly divided into three parts: Service Layer, Core Business Layer and "
"MetaStore, which collaborate with each other to efficiently handle "
"various requests and tasks from external components. The following is a "
"detailed description of each module."
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:18
#: 1e5e38eb93394ff7ad36298f82635387
msgid "! [metaserver-arch](../../images/fs-metaserver-arch.png)"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:20
#: 07607d34a13b44e49091d6f455e1e349
msgid "Service Layer"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:22
#: 2d337cdb868c410e830451761beb3bc7
msgid ""
"Provides an RPC interface to other services (Dingo-Fuse, MDS, MetaServer,"
" etc.) in the system. It also provides a RESTful interface to synchronize"
" the state (Metric) of components in the current process to Prometheus."
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:24
#: 3ecd0394975f43b789a4644e090c239c
msgid "MetaService"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:26
#: 7e41863953064dce93f6dd7f6c8c0975
msgid ""
"MetaService is the core service of MetaServer, which provides necessary "
"interfaces for file system metadata query, creation, update and deletion "
"operations, such as CreateInode, CreateDentry, ListDentry, and supports "
"dynamic creation and deletion of Partitions."
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:28
#: 785fa8dc56214dd1a01f9f99893f4a5f
msgid "CopysetService"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:30
#: cbbf5bf5f780409fa4e42941db9c1169
msgid ""
"Provides interfaces for dynamically creating Copyset and querying Copyset"
" status. When creating a file system, MDS will decide whether to create a"
" new Copyset according to the current load of the cluster."
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:32
#: 0c298862ed484e9a96bc76d543f86661
msgid "RaftService"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:34
#: 449d991cff014f8ea9adf0912e1421ec
msgid ""
"Provided by [braft](https://github.com/baidu/braft) for Raft Consistency "
"Protocol interactions."
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:36
#: 2112550296d043f88301f107faa34edd
msgid "CliService (Command Line Service)"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:38
#: 1e3cbb1383e4407b9369bc0a64a64723
msgid ""
"Provides interfaces for Raft configuration changes, including AddPeer, "
"RemovePeer, ChangePeer, TransferLeader, and an additional GetLeader "
"interface to get the latest leader information for the current "
"replication group."
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:40
#: 749a6a15be1b4b39b0150a52e27ad9f2
msgid "MetricService"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:42
#: 5ce0f29753644e4cb746883759b75b1c
msgid ""
"Provides a RESTful interface to get the state of each component of the "
"process, which Prometheus calls to collect data and display it visually "
"using Grafana."
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:44
#: 4ae1c9259fc443338dd9719d249f91bc
msgid "Core Business Layer"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:46
#: 5f0c40100b48472b9cc7aa98ab591e34
msgid ""
"MetaServer core processing logic, including the processing of metadata "
"requests and ensuring metadata consistency, high availability, and high "
"reliability; heartbeat reporting and configuration change task execution "
"processing; and registration module."
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:48
#: 265e42f0d6db4c6f841d580b4bef8818
msgid "CopysetNode"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:50
#: a959f8d28f774d58a06eb3d011718e72
msgid ""
"Represents a copy in a Raft Group, which is a simple encapsulation of a "
"braft raft node and implements a Raft state machine."
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:52
#: 72a929128bc84c54adc5a501bf700832
msgid "ApplyQueue"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:54
#: f8d4d6c840b24d87a60104503abfc947
msgid ""
"Used to isolate braft apply thread, the request that can be applied will "
"be put into ApplyQueue, meanwhile, ApplyQueue guarantees the orderly "
"execution of the request, and returns the response to the client after "
"the request is executed."
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:56
#: 9c8e3ea4d74a4bc195dba007504ef21a
msgid "MetaOperator"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:58
#: f881b2026e7444779354d3901becafab
msgid ""
"When a metadata request arrives, a corresponding operator will be "
"generated. The operator will encapsulate the request into a task, and "
"then hand it over to the CopysetNode corresponding to the metadata "
"request for processing, so as to complete the synchronization of data "
"between replicas."
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:60
#: 5a9c6e4565bc4abfaf6a022568f66859
msgid "Register"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:62
#: 22d94d02d15a4af09563b1efd0925e19
msgid ""
"The normal cluster startup process is to start the MDS first, then create"
" the logical pool, and finally start the MetaServer. when creating the "
"logical pool, you need to specify the topology of the logical pool, as "
"well as the IPs and ports of the MetaServer processes. the purpose of "
"doing so is to prevent illegal MetaServers from joining the cluster."
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:64
#: d26fbb0d332c4088b6a20b740407b252
msgid ""
"The purpose of this is to prevent unauthorized MetaServers from joining "
"the cluster. Therefore, during the startup phase of the MetaServer, you "
"need to register with the MDS, and the MDS will return a unique "
"MetaServerID and Token, which you will need to provide as an identity and"
" authentication information when the MetaServer communicates with the MDS"
" in the following phases."
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:66
#: cbf145bdbfe349c5bc0f9c9280dddd3a
msgid "Heartbeat"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:68
#: c1519c327fce462893dfeb6e486abd05
msgid ""
"MDS needs real-time information to confirm the online status of "
"MetaServer, get the status and statistics of MetaServer and Copyset, and "
"calculate whether the current cluster needs dynamic scheduling and "
"corresponding scheduling commands based on the information of all "
"MetaServers."
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:70
#: e57f59d3788b4663987d7df5b7a7f3ef
msgid ""
"MetaServer accomplishes the above functions by heartbeat, reporting the "
"information of MetaServer and Copyset through periodic heartbeats, and "
"executing the scheduling tasks in the heartbeat response."
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:72
#: 3df79dd4a079402b9bec7d583cf9814c
msgid "Metric"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:74
#: c1a300eb878449baa34e4192b533a79c
msgid ""
"Use [bvar](https://github.com/apache/incubator-"
"brpc/blob/master/docs/en/bvar.md) to export the statistics of core "
"modules in the system."
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:76
#: eab29bd8d48f4f129d8c238009978315
msgid "MetaStore"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:78
#: 242123001d1947b5b75a34dc247cfd74
msgid ""
"Efficiently organizes and manages in-memory metadata, and works with Raft"
" to periodically dump metadata to speed up the reboot process."
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:80
#: 49f65e91e15b44cd887698b21d139e89
msgid "MetaPartition"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:82
#: b424cf8681714221b60bfac1667c500a
msgid ""
"The metadata of the file system is managed in partitions, each partition "
"is called Partition, which provides an interface for adding, deleting, "
"modifying, and checking Dentry and Inode by aggregating InodeStorage and "
"DentryStorage, meanwhile, the metadata managed by Partition are all "
"cached in the memory."
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:84
#: fd7312775f6140d0aeb41d9b5b5574c4
msgid ""
"Inode corresponds to a file or a directory in the file system and records"
" the corresponding metadata information, such as atime/ctime/mtime. When "
"an Inode represents a file, it also records the data addressing "
"information of the file. Each Partition manages a fixed range of Inodes, "
"which are divided according to InodeId, for example, InodeId [1-200] is "
"managed by Partition 1, InodeId [201-400] is managed by Partition 2, and "
"so on."
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:86
#: c05add129c2e4d84abcbd3727b33b48c
msgid ""
"Dentry is a directory entry in the file system that records the mapping "
"of file names to inodes. Dentry information for all files/directories "
"under a parent directory is managed by the Partition in which the parent "
"inode resides."
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:88
#: 0c1497836336496a9700628a98f9e18a
msgid "MetaSnapshot"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:90
#: 3cc10cfd03324128976cf3d732f989b0
msgid ""
"Raft snapshots are implemented in conjunction with CopysetNode to "
"periodically dump metadata information recorded in a MetaPartition to the"
" local disk, which serves the functions of startup acceleration and "
"metadata de-duplication."
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:92
#: f92eb38a227c40ed87d81b7494fe42b1
msgid ""
"When a Raft snapshot is triggered, MetaStore will fork a child process, "
"which will serialize and persist all metadata recorded in the current "
"MetaPartition to local disk. When the process is restarted, the last Raft"
" snapshot is first loaded into the MetaPartition, and then the metadata "
"operations are played back from the Raft log."
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:94
#: 3568a3113d37455cb3e1b86cbffe66e4
msgid "S3Compaction"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:96
#: 2655ff09442542a79135cd7dc41d442f
msgid ""
"When docking to an S3 file system (file system data is stored in S3), "
"since most S3 services do not support overwrite/append writes to objects,"
" when writing to a file as described above, Dingo-Fuse will upload the "
"newly-written data to a new S3 object and insert a corresponding record "
"into the extent field of the Inode."
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:98
#: ea172a6f11ec481fa9649e228afe32ff
msgid ""
"Take the following figure as an example, after the user writes the file "
"for the first time, three overwrite writes are performed, so four records"
" will be recorded in the extent field. In the absence of Compaction, "
"subsequent read operations need to calculate the latest data for each "
"extent, then download and merge them from S3, and finally return them to "
"the upper application. The performance overhead and waste of space is "
"obvious, but there is no way to limit the write pattern of the upper tier"
" application."
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:100
#: 532bb0b348064bd5b053c96a582fe6e5
msgid "![s3compaction](../../images/fs-s3-compaction.png)"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:100
#: 2264e0907ae14f28a28e49cadb4830fc
msgid "s3compaction"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:102
#: 95a3f5eb4b1d4d1785e67f3e5311c639
msgid ""
"The main purpose of Compaction is to merge overlapping or consecutive "
"writes in the extent to generate a new S3 object to speed up subsequent "
"reads and reduce wasted storage space."
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:104
#: ec810795a8ef4971897adf4d052345f2
msgid "Trash"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:106
#: 2358322112ff4b83903a99fe82daa3f6
msgid ""
"In the current design, when the nlink count of an Inode is reduced to 0, "
"the Inode is not cleaned up immediately, but the Inode is marked as "
"pending cleanup, and will be scanned by the Trash module periodically, "
"and the Inode will be deleted from the MetaPartition only when it exceeds"
" the preset threshold time."
msgstr ""

