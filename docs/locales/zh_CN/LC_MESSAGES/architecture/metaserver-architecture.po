# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, DataCanvas
# This file is distributed under the same license as the DingoFS package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: DingoFS\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-05 12:06+0800\n"
"PO-Revision-Date: 2025-06-06 12:07+0800\n"
"Last-Translator: \n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.17.0\n"
"X-Generator: Poedit 3.6\n"

#: ../../source/architecture/metaserver-architecture.md:1
#: 8b0ed4101563409ebe719ce339f90503
msgid "MetaServer Architecture"
msgstr "MetaServer 架构"

#: ../../source/architecture/metaserver-architecture.md:2
#: b2f7545555e541fd84f886e2f6869a53
msgid "Overview"
msgstr "概述"

#: ../../source/architecture/metaserver-architecture.md:4
#: 371151d2c6b549369830a2d880a1bcba
msgid ""
"MetaServer provides highly available and reliable metadata services in a "
"DingoFS cluster and guarantees file system metadata consistency. At the "
"same time, it was designed with high performance and scalability in mind."
msgstr ""
"MetaServer 在 DingoFS 集群中提供高可用、高可靠的元数据服务，并保证文件系"
"统元数据的一致性。同时，在设计之初就以高性能和扩展性作为目标。"

#: ../../source/architecture/metaserver-architecture.md:6
#: a5c05b9b3b314f6790a4815fb9da6386
msgid ""
"In the overall design, a single MetaServer runs on the host as a user "
"process, and a host can run multiple MetaServer processes if there are "
"enough CPU/RAM resources. At the same time, Raft is utilized to ensure "
"data consistency and high availability of services."
msgstr ""
"在整体设计上，单个 MetaServer 以用户态进程的形式运行在宿主机上，在 CPU/"
"RAM 等资源充足的情况下，一台宿主机可以运行多个 MetaServer 进程。同时，也"
"引入了 ChunkServer 中 Copyset 的设计，利用 Raft 保证数据的一致性和服务的"
"高可用。"

#: ../../source/architecture/metaserver-architecture.md:8
#: 26d8090d384c4200a2e1f59b33095ec9
msgid ""
"At the metadata management level, file system metadata is managed in "
"slices to avoid the performance bottleneck caused by a single Raft Group "
"maintaining a file system metadata. Each slice of metadata is called a "
"Partition, and the correspondence between Copyset and Partition can be "
"one-to-one or one-to-many. In the one-to-many case, a Copyset can "
"maintain multiple Partitions. in the one-to-many case, the file system "
"metadata management is shown in the following figure:"
msgstr ""
"在元数据管理层面，对文件系统元数据进行分片管理，避免单个 Raft Group 维护"
"一个文件系统元数据是带来的性能瓶颈。元数据的每个分片称为 Partition。"
"Copyset 与 Partition 的对应关系可以是一对一，也可以是一对多。一对多的情况"
"下表示，一个 Copyset 可以维护多个 Partition。在一对多的情况下，文件系统的"
"元数据管理如下图所示："

#: ../../source/architecture/metaserver-architecture.md:10
#: 7ce9d14b0bcb43668eff530e0cb91f99
msgid "![copyset-partition](../../images/fs-copyset-partition.png)"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:10
#: 49f65e91e15b44cd887698b21d139e89
msgid "copyset-partition"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:12
#: bf445dc4d58247369c39686b1ede725e
msgid ""
"There are two Copysets in the figure, and three copies are placed on "
"three machines.P1/P2/P3/P4 denote the metadata partitions of the file "
"system, where P1/P3 belongs to one file system and P2/P4 belongs to one "
"file system."
msgstr ""
"图中共有两个 Copyset，三个副本放置在三台机器上。P1/P2/P3/P4 表示文件系统"
"的元数据分片，其中 P1/P3 属于一个文件系统，P2/P4 属于一个文件系统。"

#: ../../source/architecture/metaserver-architecture.md:14
#: 02ad1532f15b4e938f18008120d39abd
msgid "Overall Architecture"
msgstr "整体架构"

#: ../../source/architecture/metaserver-architecture.md:16
#: c31ace6b37a5450ba571f8afc8c0b12d
msgid ""
"The overall architecture of MetaServer is shown below, which can be "
"roughly divided into three parts: Service Layer, Core Business Layer and "
"MetaStore, which collaborate with each other to efficiently handle "
"various requests and tasks from external components. The following is a "
"detailed description of each module."
msgstr ""
"MetaServer 的整体架构如下所示，大致可分为三个部分：Service Layer、Core "
"Business Layer 和 MetaStore。三者之间相互协作，高效处理外部组件的各种请求"
"和任务。下面将对各个模块进行详细的介绍。"

#: ../../source/architecture/metaserver-architecture.md:18
#: 1e5e38eb93394ff7ad36298f82635387
msgid "![metaserver-arch](../../images/fs-metaserver-arch.png)"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:18
#: ed53b7b1182a426e8ed8a91ee4354c81
msgid "metaserver-arch"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:20
#: 07607d34a13b44e49091d6f455e1e349
msgid "Service Layer"
msgstr "服务层"

#: ../../source/architecture/metaserver-architecture.md:22
#: 2d337cdb868c410e830451761beb3bc7
msgid ""
"Provides an RPC interface to other services (Dingo-Fuse, MDS, "
"MetaServer, etc.) in the system. It also provides a RESTful interface to "
"synchronize the state (Metric) of components in the current process to "
"Prometheus."
msgstr ""
"对外提供 RPC 接口，供系统中的其他服务（Dingo-Fuse、MDS、MetaServer 等）调"
"用。同时提供 RESTful 接口，可以把当前进程中各组件的状态（Metric）同步给 "
"Prometheus。"

#: ../../source/architecture/metaserver-architecture.md:24
#: 3ecd0394975f43b789a4644e090c239c
msgid "MetaService"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:26
#: 7e41863953064dce93f6dd7f6c8c0975
msgid ""
"MetaService is the core service of MetaServer, which provides necessary "
"interfaces for file system metadata query, creation, update and deletion "
"operations, such as CreateInode, CreateDentry, ListDentry, and supports "
"dynamic creation and deletion of Partitions."
msgstr ""
"提供元数据服务，是 MetaServer 的核心服务，提供文件系统元数据查询、创建、"
"更新、删除操作的必要接口，例如 CreateInode、CreateDentry、ListDentry，并"
"支持 Partition 的动态创建和删除。"

#: ../../source/architecture/metaserver-architecture.md:28
#: 785fa8dc56214dd1a01f9f99893f4a5f
msgid "CopysetService"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:30
#: cbbf5bf5f780409fa4e42941db9c1169
msgid ""
"Provides interfaces for dynamically creating Copyset and querying "
"Copyset status. When creating a file system, MDS will decide whether to "
"create a new Copyset according to the current load of the cluster."
msgstr ""
"提供动态创建Copyset、查询Copyset状态接口。在创建文件系统时，MDS会根据当前"
"集群的负载情况，决定是否创建新的Copyset。"

#: ../../source/architecture/metaserver-architecture.md:32
#: 0c298862ed484e9a96bc76d543f86661
msgid "RaftService"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:34
#: 449d991cff014f8ea9adf0912e1421ec
msgid ""
"Provided by [braft](https://github.com/baidu/braft) for Raft Consistency "
"Protocol interactions."
msgstr ""
"由 [braft](https://github.com/baidu/braft) 提供，用于 Raft 一致性协议的交"
"互。"

#: ../../source/architecture/metaserver-architecture.md:36
#: 2112550296d043f88301f107faa34edd
msgid "CliService (Command Line Service)"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:38
#: 1e3cbb1383e4407b9369bc0a64a64723
msgid ""
"Provides interfaces for Raft configuration changes, including AddPeer, "
"RemovePeer, ChangePeer, TransferLeader, and an additional GetLeader "
"interface to get the latest leader information for the current "
"replication group."
msgstr ""
"提供 Raft 配置变更接口，包括 AddPeer、RemovePeer、ChangePeer、"
"TransferLeader。同时提供了一个额外的 GetLeader 接口，用于获取当前复制组最"
"新的 Leader 信息。"

#: ../../source/architecture/metaserver-architecture.md:40
#: 749a6a15be1b4b39b0150a52e27ad9f2
msgid "MetricService"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:42
#: 5ce0f29753644e4cb746883759b75b1c
msgid ""
"Provides a RESTful interface to get the state of each component of the "
"process, which Prometheus calls to collect data and display it visually "
"using Grafana."
msgstr ""
"提供 RESTful 接口，可以获取进程各组件的状态，Prometheus 会调用该接口采集"
"数据，并利用 Grafana 可视化展示。"

#: ../../source/architecture/metaserver-architecture.md:44
#: 4ae1c9259fc443338dd9719d249f91bc
msgid "Core Business Layer"
msgstr "核心业务层"

#: ../../source/architecture/metaserver-architecture.md:46
#: 5f0c40100b48472b9cc7aa98ab591e34
msgid ""
"MetaServer core processing logic, including the processing of metadata "
"requests and ensuring metadata consistency, high availability, and high "
"reliability; heartbeat reporting and configuration change task execution "
"processing; and registration module."
msgstr ""
"MetaServer 核心处理逻辑，包括元数据请求的处理，并保证元数据的一致性、高可"
"用、高可靠；心跳上报及配置变更任务的执行处理；以及注册模块等。"

#: ../../source/architecture/metaserver-architecture.md:48
#: 265e42f0d6db4c6f841d580b4bef8818
msgid "CopysetNode"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:50
#: a959f8d28f774d58a06eb3d011718e72
msgid ""
"Represents a copy in a Raft Group, which is a simple encapsulation of a "
"braft raft node and implements a Raft state machine."
msgstr ""
"表示 Raft Group 中的一个副本，是 braft raft node 的简单封装，同时实现了 "
"Raft 状态机。"

#: ../../source/architecture/metaserver-architecture.md:52
#: 72a929128bc84c54adc5a501bf700832
msgid "ApplyQueue"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:54
#: f8d4d6c840b24d87a60104503abfc947
msgid ""
"Used to isolate braft apply thread, the request that can be applied will "
"be put into ApplyQueue, meanwhile, ApplyQueue guarantees the orderly "
"execution of the request, and returns the response to the client after "
"the request is executed."
msgstr ""
"用于隔离 braft apply 线程，可以 apply 的请求会放入 ApplyQueue 中，同时 "
"ApplyQueue 保证请求的有序执行，在请求执行完成后，返回给客户端响应。"

#: ../../source/architecture/metaserver-architecture.md:56
#: 9c8e3ea4d74a4bc195dba007504ef21a
msgid "MetaOperator"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:58
#: f881b2026e7444779354d3901becafab
msgid ""
"When a metadata request arrives, a corresponding operator will be "
"generated. The operator will encapsulate the request into a task, and "
"then hand it over to the CopysetNode corresponding to the metadata "
"request for processing, so as to complete the synchronization of data "
"between replicas."
msgstr ""
"元数据请求到达后，会生成一个对应的 operator，operator 会将请求封装成 "
"task，然后交给元数据请求对应的 CopysetNode 进行处理，完成副本间的数据同"
"步。"

#: ../../source/architecture/metaserver-architecture.md:60
#: 5a9c6e4565bc4abfaf6a022568f66859
msgid "Register"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:62
#: 22d94d02d15a4af09563b1efd0925e19
msgid ""
"The normal cluster startup process is to start the MDS first, then "
"create the logical pool, and finally start the MetaServer. when creating "
"the logical pool, you need to specify the topology of the logical pool, "
"as well as the IPs and ports of the MetaServer processes. the purpose of "
"doing so is to prevent illegal MetaServers from joining the cluster."
msgstr ""
"正常集群的启动流程是，先启动MDS，然后创建逻辑池，最后启动 MetaServer。在"
"创建逻辑池时，需要指定逻辑池的拓扑结构，以及各个 MetaServer 进程的 IP 和 "
"Port。这样做的目的是，阻止非法的 MetaServer 加入集群。"

#: ../../source/architecture/metaserver-architecture.md:64
#: d26fbb0d332c4088b6a20b740407b252
msgid ""
"The purpose of this is to prevent unauthorized MetaServers from joining "
"the cluster. Therefore, during the startup phase of the MetaServer, you "
"need to register with the MDS, and the MDS will return a unique "
"MetaServerID and Token, which you will need to provide as an identity "
"and authentication information when the MetaServer communicates with the "
"MDS in the following phases."
msgstr ""
"所以，在 MetaServer 的启动阶段，需要先向 MDS 进行注册，MDS 验证后会返回唯"
"一标识 MetaServerID 及 Token。在后续 MetaServer 与 MDS 通讯时，需要提供"
"此 ID 和 Token 作为身份标识和合法性认证信息。"

#: ../../source/architecture/metaserver-architecture.md:66
#: cbf145bdbfe349c5bc0f9c9280dddd3a
msgid "Heartbeat"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:68
#: c1519c327fce462893dfeb6e486abd05
msgid ""
"MDS needs real-time information to confirm the online status of "
"MetaServer, get the status and statistics of MetaServer and Copyset, and "
"calculate whether the current cluster needs dynamic scheduling and "
"corresponding scheduling commands based on the information of all "
"MetaServers."
msgstr ""
"MDS 需要实时的信息来确认 MetaServer 的在线状态，并获取 MetaServer 和 "
"Copyset 的状态和统计数据，并根据所有 MetaServer 的信息计算当前集群是否需"
"要动态调度以及相应的调度命令。"

#: ../../source/architecture/metaserver-architecture.md:70
#: e57f59d3788b4663987d7df5b7a7f3ef
msgid ""
"MetaServer accomplishes the above functions by heartbeat, reporting the "
"information of MetaServer and Copyset through periodic heartbeats, and "
"executing the scheduling tasks in the heartbeat response."
msgstr ""
"MetaServer 以心跳的方式来完成上述功能，通过周期性的心跳，上报 MetaServer "
"和 Copyset 的信息，同时执行心跳响应中的调度任务。"

#: ../../source/architecture/metaserver-architecture.md:72
#: 3df79dd4a079402b9bec7d583cf9814c
msgid "Metric"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:74
#: c1a300eb878449baa34e4192b533a79c
msgid ""
"Use [bvar](https://github.com/apache/incubator-brpc/blob/master/docs/en/"
"bvar.md) to export the statistics of core modules in the system."
msgstr ""
"利用  [bvar](https://github.com/apache/incubator-brpc/blob/master/docs/"
"en/bvar.md)  导出系统中核心模块的统计信息。"

#: ../../source/architecture/metaserver-architecture.md:76
#: eab29bd8d48f4f129d8c238009978315
msgid "MetaStore"
msgstr "元存储"

#: ../../source/architecture/metaserver-architecture.md:78
#: 242123001d1947b5b75a34dc247cfd74
msgid ""
"Efficiently organizes and manages in-memory metadata, and works with "
"Raft to periodically dump metadata to speed up the reboot process."
msgstr ""
"高效组织和管理内存元数据，同时配合 Raft 对元数据进行定期 dump，加速重启过"
"程。"

#: ../../source/architecture/metaserver-architecture.md:80
#: 49f65e91e15b44cd887698b21d139e89
msgid "MetaPartition"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:82
#: b424cf8681714221b60bfac1667c500a
msgid ""
"The metadata of the file system is managed in partitions, each partition "
"is called Partition, which provides an interface for adding, deleting, "
"modifying, and checking Dentry and Inode by aggregating InodeStorage and "
"DentryStorage, meanwhile, the metadata managed by Partition are all "
"cached in the memory."
msgstr ""
"文件系统的元数据进行分片管理，每个分片称为 Partition，Partition 通过聚合 "
"InodeStorage 和 DentryStorage，提供了对 Dentry 和 Inode 的增删改查接口，"
"同时 Partition 管理的元数据全部缓存在内存中。"

#: ../../source/architecture/metaserver-architecture.md:84
#: fd7312775f6140d0aeb41d9b5b5574c4
msgid ""
"Inode corresponds to a file or a directory in the file system and "
"records the corresponding metadata information, such as atime/ctime/"
"mtime. When an Inode represents a file, it also records the data "
"addressing information of the file. Each Partition manages a fixed range "
"of Inodes, which are divided according to InodeId, for example, InodeId "
"[1-200] is managed by Partition 1, InodeId [201-400] is managed by "
"Partition 2, and so on."
msgstr ""
"Inode 对应文件系统中的一个文件或目录，记录相应的元数据信息，比如 atime/"
"ctime/mtime 等。当 Inode 表示一个文件时，还会记录文件的数据寻址信息。每"
"个 Partition 管理固定范围内的 Inode，根据 InodeId 进行划分，比如 InodeId "
"[1-200] 由 Partition 1管理，InodeId [201-400] 由 Partition 2 管理，依次类"
"推。"

#: ../../source/architecture/metaserver-architecture.md:86
#: c05add129c2e4d84abcbd3727b33b48c
msgid ""
"Dentry is a directory entry in the file system that records the mapping "
"of file names to inodes. Dentry information for all files/directories "
"under a parent directory is managed by the Partition in which the parent "
"inode resides."
msgstr ""
"Dentry 是文件系统中的目录项，记录文件名到 inode 的映射关系。一个父目录下"
"所有文件/目录的 Dentry 信息由父目录 Inode 所在的 Partition 进行管理。"

#: ../../source/architecture/metaserver-architecture.md:88
#: 0c1497836336496a9700628a98f9e18a
msgid "MetaSnapshot"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:90
#: 3cc10cfd03324128976cf3d732f989b0
msgid ""
"Raft snapshots are implemented in conjunction with CopysetNode to "
"periodically dump metadata information recorded in a MetaPartition to "
"the local disk, which serves the functions of startup acceleration and "
"metadata de-duplication."
msgstr ""
"配合 CopysetNode 实现 Raft 快照，定期将 MetaPartition 中记录的元数据信息 "
"dump 到本地磁盘上，起到了启动加速以及元数据去重的功能。"

#: ../../source/architecture/metaserver-architecture.md:92
#: f92eb38a227c40ed87d81b7494fe42b1
msgid ""
"When a Raft snapshot is triggered, MetaStore will fork a child process, "
"which will serialize and persist all metadata recorded in the current "
"MetaPartition to local disk. When the process is restarted, the last "
"Raft snapshot is first loaded into the MetaPartition, and then the "
"metadata operations are played back from the Raft log."
msgstr ""
"当 Raft 快照触发时，MetaStore 会 fork 出一个子进程，子进程会把当前 "
"MetaPartition 中记录的所有元数据进行序列化并持久化到本地磁盘上。在进程重"
"启时，会首先加载上次的 Raft 快照到 MetaPartition 中，然后再从 Raft 日志中"
"回放元数据操作记录。"

#: ../../source/architecture/metaserver-architecture.md:94
#: 3568a3113d37455cb3e1b86cbffe66e4
msgid "S3Compaction"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:96
#: 2655ff09442542a79135cd7dc41d442f
msgid ""
"When docking to an S3 file system (file system data is stored in S3), "
"since most S3 services do not support overwrite/append writes to "
"objects, when writing to a file as described above, Dingo-Fuse will "
"upload the newly-written data to a new S3 object and insert a "
"corresponding record into the extent field of the Inode."
msgstr ""
"在对接 S3 文件系统（文件系统数据存放到 S3）时，由于大多数 S3 服务不支持对"
"象的覆盖写/追加写，所以在对文件进行上述写入时，Dingo-Fuse 会把新写入的数"
"据上传到一个新的 S3 对象，并向 Inode 的 extent 字段中中插入一条相应的记"
"录。"

#: ../../source/architecture/metaserver-architecture.md:98
#: ea172a6f11ec481fa9649e228afe32ff
msgid ""
"Take the following figure as an example, after the user writes the file "
"for the first time, three overwrite writes are performed, so four "
"records will be recorded in the extent field. In the absence of "
"Compaction, subsequent read operations need to calculate the latest data "
"for each extent, then download and merge them from S3, and finally "
"return them to the upper application. The performance overhead and waste "
"of space is obvious, but there is no way to limit the write pattern of "
"the upper tier application."
msgstr ""
"以下图为例，用户在第一次写入文件后，进行了三次覆盖写，所以 extent 中会记"
"录 4 条记录。在没有 Compaction 的情况下，后续的读操作需要计算出每个范围的"
"最新数据，然后分别从 S3 下载、合并，最终返回给上层应用。这里的性能开销、"
"空间浪费是显而易见的，但是上层应用的写入模式是无法限制的。"

#: ../../source/architecture/metaserver-architecture.md:100
#: 532bb0b348064bd5b053c96a582fe6e5
msgid "![s3compaction](../../images/fs-s3-compaction.png)"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:100
#: 2264e0907ae14f28a28e49cadb4830fc
msgid "s3compaction"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:102
#: 95a3f5eb4b1d4d1785e67f3e5311c639
msgid ""
"The main purpose of Compaction is to merge overlapping or consecutive "
"writes in the extent to generate a new S3 object to speed up subsequent "
"reads and reduce wasted storage space."
msgstr ""
"Compaction 的主要作用就是将 extent 中有重叠或连续的写入进行合并，生成一个"
"新的 S3 对象，以加快后续的读取速度，减少存储空间浪费。"

#: ../../source/architecture/metaserver-architecture.md:104
#: ec810795a8ef4971897adf4d052345f2
msgid "Trash"
msgstr ""

#: ../../source/architecture/metaserver-architecture.md:106
#: 2358322112ff4b83903a99fe82daa3f6
msgid ""
"In the current design, when the nlink count of an Inode is reduced to 0, "
"the Inode is not cleaned up immediately, but the Inode is marked as "
"pending cleanup, and will be scanned by the Trash module periodically, "
"and the Inode will be deleted from the MetaPartition only when it "
"exceeds the preset threshold time."
msgstr ""
"在当前的设计中，Inode 的 nlink 计数减到 0 时，并没有立即对该 Inode 进行清"
"理，而是将 Inode 标记为待清理状态，由 Trash 模块进行定期扫描，当超过预设"
"的阈值时间后，才将 Inode 从 MetaPartition 中删除。"
